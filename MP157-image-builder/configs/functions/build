# Functions:
# build_uboot
# build_linux
# build_linux_debs

## Build TF-A
build_tfa() {
	ret=0

	if [ "$TFA_GIT_BRANCH" == "" ]; then
		error_msg "'TFA_GIT_BRANCH' is empty!"
		return -1
	fi	

	cd ${ROOT}
	if [ ! -d ${TFA_DIR}/.git ]; then
		info_msg "tfa repository does not exist, clone tfa repository('$TFA_GIT_BRANCH') from '$TFA_SOURCE_URL'..."
		## Clone tfa from Khadas GitHub
		git clone $GIT_CLONE_OPTIONS $TFA_SOURCE_URL -b $TFA_GIT_BRANCH
		[ $? != 0 ] && error_msg "Failed to clone 'tfa'" && return -1
	fi

	cd ${TFA_DIR}/

	if ! git branch | grep "^* $TFA_GIT_BRANCH$" > /dev/null; then
		if ! git branch | grep "^  $TFA_GIT_BRANCH$" > /dev/null; then
			# New branch? Try to fetch it.
			info_msg "Fetching '$TFA_GIT_BRANCH' from '$TFA_SOURCE_URL'..."
			git fetch origin $TFA_GIT_BRANCH:$TFA_GIT_BRANCH
		fi

		info_msg "tfa: Switch to branch '$TFA_GIT_BRANCH'"
		make distclean
		# Check modifications
		check_modifications || {
			error_msg "tfa: can't checkout to branch '$TFA_GIT_BRANCH', please commit your modifications and try again!"
			return -1
		}

		git checkout $TFA_GIT_BRANCH
		[ $? != 0 ] && error_msg "tfa: Switch to branch '$TFA_GIT_BRANCH' failed." && return -1
	else
		info_msg "tfa: Already on branch '$TFA_GIT_BRANCH'"
	fi

	# Update tfa
	update_git_repo "$PWD" "$TFA_GIT_BRANCH"

	info_msg "Build tfa..."

    make ARCH=arm CROSS_COMPILE="${TFA_COMPILER}" distclean

	info_msg "Build tfa..."

	make -j${NR_JOBS} ARCH=arm CROSS_COMPILE="${TFA_COMPILER}"  ${TFA_EXTRA_ARGS}

	cp ${TFA_DIR}//build/trusted/${TFA_BUILD_FILE} ${BUILD}/${TFA_BUILD_FILE}

	ret=$?

	return $ret
}

## Build U-Boot
build_uboot() {
	ret=0
	cd ${ROOT}
	if [ ! -d ${UBOOT_DIR}/.git ]; then
		info_msg "U-boot repository does not exist, clone u-boot repository('$UBOOT_GIT_TAGS') from '$UBOOT_SOURCE_URL'..."
		## Clone u-boot from Khadas GitHub
		if [ "$UBOOT_GIT_TAGS" == "" ]; then
			git clone $GIT_CLONE_OPTIONS $UBOOT_SOURCE_URL -b $UBOOT_GIT_BRANCH
			[ $? != 0 ] && error_msg "Failed to clone 'u-boot'" && return -1
		else
			git clone $GIT_CLONE_OPTIONS $UBOOT_SOURCE_URL -b $UBOOT_GIT_TAGS
			[ $? != 0 ] && error_msg "Failed to clone 'u-boot'" && return -1
		fi
	fi

	cd ${UBOOT_DIR}/
	make distclean
	if [ "$UBOOT_GIT_TAGS" == "" ]; then
		if ! git branch | grep "^* $UBOOT_GIT_BRANCH$" > /dev/null; then
			if ! git branch | grep "^  $UBOOT_GIT_BRANCH$" > /dev/null; then
				# New branch? Try to fetch it.
				info_msg "Fetching '$UBOOT_GIT_BRANCH' from '$UBOOT_SOURCE_URL'..."
				git fetch $GIT_CLONE_OPTIONS origin $UBOOT_GIT_BRANCH:$UBOOT_GIT_BRANCH
			fi

			info_msg "U-boot: Switch to branch '$UBOOT_GIT_BRANCH'"
			make distclean
			# Check modifications
			check_modifications || {
				error_msg "U-boot: can't checkout to branch '$UBOOT_GIT_BRANCH', please commit your modifications and try again!"
				return -1
			}

			git checkout $UBOOT_GIT_BRANCH
			[ $? != 0 ] && error_msg "U-boot: Switch to branch '$UBOOT_GIT_BRANCH' failed." && return -1
		else
			info_msg "U-boot: Already on branch '$UBOOT_GIT_BRANCH'"
		fi
	else
		if ! git tag | grep "^* $UBOOT_GIT_TAGS$" > /dev/null; then
			if ! git tag | grep "^  $UBOOT_GIT_TAGS$" > /dev/null; then
				# New branch? Try to fetch it.
				info_msg "Fetching '$UBOOT_GIT_TAGS' from '$UBOOT_SOURCE_URL'..."
				git fetch $GIT_CLONE_OPTIONS origin tag $UBOOT_GIT_TAGS
			fi

			info_msg "U-boot: Switch to branch '$UBOOT_GIT_TAGS'"
			make distclean
			# Check modifications
			check_modifications || {
				error_msg "U-boot: can't checkout to branch '$UBOOT_GIT_TAGS', please commit your modifications and try again!"
				return -1
			}

			git checkout $UBOOT_GIT_TAGS
			[ $? != 0 ] && error_msg "U-boot: Switch to tag '$UBOOT_GIT_TAGS' failed." && return -1
		else
			info_msg "U-boot: Already on tag '$UBOOT_GIT_TAGS'"
		fi
	fi

	# Update u-boot
	if [ "$UBOOT_GIT_TAGS" == "" ]; then
		update_git_repo "$PWD" "$UBOOT_GIT_BRANCH"
	else
		git checkout $UBOOT_GIT_TAGS
	fi

	info_msg "Build u-boot..."

	rm -rf .config *.bin *.img

	if [ "$BUILD_SCRIPT_OF_UBOOT" == "" ]; then
		if [ "x${INSTALL_TYPE}" = "xeMMC/SD" -o "x${INSTALL_TYPE}" = "xALL" ] ; then
			make distclean
			make $UBOOT_MMC_DEFCONFIG CROSS_COMPILE="${UBOOT_COMPILER}" ARCH=arm
			make -j${NR_JOBS} CROSS_COMPILE="${UBOOT_COMPILER}" ${UBOOT_EXTRA_ARGS}
			
			cp ${UBOOT_BUILD_FILE} ${BUILD}/${MUBOOT_FILE}
			if [ "${SPL_BUILD_FILE}" ]; then
				if [ "${target_name}" == "imx8m-mini" ]; then
					cp spl/${SPL_BUILD_FILE} ${BUILD}
				else
					cp ${SPL_BUILD_FILE} ${BUILD}
				fi
			fi
		fi

		if [ "x${INSTALL_TYPE}" = "xNAND" ] || [ "x${INSTALL_TYPE}" = "xALL" -a "${MUBOOT_FILE}" != "${NUBOOT_FILE}" ] ; then
			make distclean
			make $UBOOT_NAND_DEFCONFIG  CROSS_COMPILE="${UBOOT_COMPILER}" ARCH=arm
			make -j${NR_JOBS}  ARCH=arm CROSS_COMPILE="${UBOOT_COMPILER}" ${UBOOT_EXTRA_ARGS}
			
			cp ${UBOOT_BUILD_FILE} ${BUILD}/${NUBOOT_FILE}
			if [ "${SPL_BUILD_FILE}" ] ; then
				if [ "${target_name}" == "imx8m-mini" ]; then
					cp spl/${SPL_BUILD_FILE} ${BUILD}
				else
					cp ${SPL_BUILD_FILE} ${BUILD}
				fi
			fi		
		fi
	fi

	if [ ! "$BUILD_BIN_SCRIPT" == "" ]; then
		. $BUILD_SCRIPT/$BUILD_BIN_SCRIPT
	fi


       	
    

	ret=$?

	return $ret
}

## Build Linux
build_linux() {

	if [ "$LINUX_GIT_BRANCH" == "" ] || [ "$LINUX_MMC_DTB" == "" ] || [ "$LINUX_NAND_DTB" == "" ]; then
		[ "$LINUX_GIT_BRANCH" == "" ] && error_msg "'LINUX_GIT_BRANCH' is empty!"
		[ "$LINUX_MMC_DTB" == "" ] && error_msg "'LINUX_DTB' is empty!"
		[ "$LINUX_NAND_DTB" == "" ] && error_msg "'LINUX_DTB' is empty!"
		return -1
	fi

	cd ${ROOT}
	if [ ! -d ${LINUX_DIR}/.git ]; then
		info_msg "Linux repository does not exist, clone linux repository('$LINUX_GIT_TAGS') from '$LINUX_SOURCE_URL'..."
		## Clone linux from embedfire GitHub
		if [ "$LINUX_GIT_TAGS" == "" ]; then
			echo $LINUX_SOURCE_URL
			git clone $GIT_CLONE_OPTIONS $LINUX_SOURCE_URL -b $LINUX_GIT_BRANCH
			[ $? != 0 ] && error_msg "Failed to clone 'linux'" && return -1
		else
			git clone $GIT_CLONE_OPTIONS $UBOOT_SOURCE_URL -b $LINUX_GIT_TAGS
			[ $? != 0 ] && error_msg "Failed to clone 'linux'" && return -1
		fi
	fi

	cd ${LINUX_DIR}
	make ARCH=$ARCH distclean

	if [ "$LINUX_GIT_TAGS" == "" ]; then
		if ! git branch | grep "^* $LINUX_GIT_BRANCH$" > /dev/null; then
			if ! git branch | grep "^  $LINUX_GIT_BRANCH$" > /dev/null; then
				# New branch? Try to fetch it.
				info_msg "Fetching '$LINUX_GIT_BRANCH' from '$LINUX_SOURCE_URL'..."
				git fetch $GIT_CLONE_OPTIONS origin $LINUX_GIT_BRANCH:$LINUX_GIT_BRANCH
			fi

			info_msg "Linux: Switch to branch '$LINUX_GIT_BRANCH'"

			make ARCH=$ARCH distclean

			git checkout $LINUX_GIT_BRANCH
			[ $? != 0 ] && error_msg "Linux: Switch to branch '$LINUX_GIT_BRANCH' failed." && return -1
		else
			info_msg "Linux: Already on branch '$LINUX_GIT_BRANCH'"
		fi
	else
		if ! git tag | grep "^* $LINUX_GIT_TAGS$" > /dev/null; then
			if ! git tag | grep "^  $LINUX_GIT_TAGS$" > /dev/null; then
				# New branch? Try to fetch it.
				info_msg "Fetching '$LINUX_GIT_BRANCH' from '$LINUX_SOURCE_URL'..."
				git fetch $GIT_CLONE_OPTIONS origin tag $LINUX_GIT_TAGS
			fi

			info_msg "Linux: Switch to tag '$LINUX_GIT_TAGS'"

			make ARCH=$ARCH distclean

			git checkout $LINUX_GIT_TAGS
			[ $? != 0 ] && error_msg "Linux: Switch to branch '$LINUX_GIT_TAGS' failed." && return -1
		else
			info_msg "Linux: Already on tag '$LINUX_GIT_TAGS'"
		fi
	fi

	# Update linux
	if [ "$LINUX_GIT_TAGS" == "" ]; then
		update_git_repo "$PWD" "$LINUX_GIT_BRANCH"
	else
		git checkout $LINUX_GIT_TAGS
	fi

    # clean linux
    info_msg "clean linux..."
    make ARCH=$ARCH CROSS_COMPILE="${KERNEL_COMPILER}" distclean O=${BUILD_IMAGES}

	info_msg "Build linux..."

	make ARCH=$ARCH  $LINUX_DEFCONFIG CROSS_COMPILE="${KERNEL_COMPILER}" O=${BUILD_IMAGES} 
	make -j${NR_JOBS} ARCH=$ARCH  CROSS_COMPILE="${KERNEL_COMPILER}" O=${BUILD_IMAGES} ${KERNEL_EXTRA_ARGS}
}

## Build linux debs
build_linux_debs() {

	# Build linux debs
	info_msg "Build linux debs..."

	cd $ROOT

	make -j${NR_JOBS} -C ${BUILD_IMAGES} bindeb-pkg ARCH=$ARCH CROSS_COMPILE="${KERNEL_COMPILER}" \
    CONFIG_SHELL="bash" KDEB_PKGVERSION=${KDEB_VERSION} LOCALVERSION=${LOCAL_VERSION}

    mkdir -p $BUILD_DEBS	
    mv $BUILD/*.deb $BUILD_DEBS
	if [ -f $BUILD/vmlinuz* ]; then
    	mv $BUILD/vmlinuz* $BUILD_DEBS
	fi
    rm -rf $BUILD/*.buildinfo $BUILD/*.changes
}
